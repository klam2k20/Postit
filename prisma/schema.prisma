// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?        @unique
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  communities   Community[]
  posts         Post[]
  comments      Comment[]
  postVotes     PostVote[]
  commentVotes  CommentVote[]
  subscriptions Subscription[]

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ForgotPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Community {
  id          String         @id @default(cuid())
  name        String         @unique
  creator     User           @relation(fields: [creatorId], references: [id])
  creatorId   String
  posts       Post[]
  subscribers Subscription[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([name])
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     Json?
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  community   Community  @relation(fields: [communityId], references: [id])
  communityId String
  comments    Comment[]
  votes       PostVote[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post          @relation(fields: [postId], references: [id])
  postId    String
  replyTo   Comment?      @relation(name: "ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?
  replies   Comment[]     @relation(name: "ReplyTo")
  votes     CommentVote[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum VoteType {
  UP
  DOWN
}

model PostVote {
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  user   User     @relation(fields: [userId], references: [id])
  userId String
  type   VoteType

  @@id([postId, userId])
}

model CommentVote {
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      VoteType

  @@id([commentId, userId])
}

model Subscription {
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@id([communityId, userId])
}
